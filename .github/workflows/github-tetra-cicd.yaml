name: CI/CD • TDP

on:
  push:
    branches: [ main, DEV ]
    paths:
      - "Implementation_Codes/**/src/**"
      - "Implementation_Codes/**/tests/**"
      - "Implementation_Codes/**/config/**"
      - ".github/workflows/ci-cd-tdp.yml"
  pull_request:
    branches: [ main, DEV ]
    paths:
      - "Implementation_Codes/**/src/**"
      - "Implementation_Codes/**/tests/**"
      - "Implementation_Codes/**/config/**"
      - ".github/workflows/ci-cd-tdp.yml"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==============================
  # CI — run unit tests + HTML report
  # ==============================
  test:
    name: CI • Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          cd Implementation_Codes/Test_instrument
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-html

      - name: Run pytest (generate HTML report)
        shell: bash
        run: |
          set -euo pipefail
          cd Implementation_Codes/Test_instrument
          pytest -v --disable-warnings \
            --html=report.html --self-contained-html

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-html-report
          path: Implementation_Codes/Test_instrument/report.html
          retention-days: 7

  # ==============================
  # CD — update pipeline JSON & POST to TDP
  # ==============================
  deploy-tdp:
    name: CD • Update TDP pipeline
    needs: [test]
    if: ${{ needs.test.result == 'success' }}
    runs-on: ubuntu-latest

    # Required repo secrets:
    #   - TDP_API_TOKEN  (JWT/API token)
    #   - EITHER TDP_INGEST_URL (full URL) OR TDP_PIPELINE_ID (UUID)
    # Optional:
    #   - TDP_ORG_SLUG (defaults to gilead-dev)
    env:
      TDP_API_TOKEN:  ${{ secrets.TDP_API_TOKEN }}
      TDP_INGEST_URL: ${{ secrets.TDP_INGEST_URL }}
      TDP_PIPELINE_ID: ${{ secrets.TDP_PIPELINE_ID }}
      TDP_ORG_SLUG:   ${{ secrets.TDP_ORG_SLUG || 'gilead-dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Get changed files
        id: changed
        uses: tj-actions/changed-files@v45
        with:
          files: |
            Implementation_Codes/**/src/**/*.py
            Implementation_Codes/**/config/*.json
            Implementation_Codes/**/src/update_pipeline.py

      - name: Plan changed step-scripts
        id: plan
        shell: bash
        run: |
          set -euo pipefail
          printf '%s\n' "${{ steps.changed.outputs.all_changed_files }}" > all.txt
          echo "Changed files:" && cat all.txt || true

          # Match files like:
          # Implementation_Codes/<instrument>/src/pipeline_<name>-script_<step>.py
          grep -E '^Implementation_Codes/[^/]+/src/pipeline_.*-script_.*\.py$' all.txt > tasks.txt || true

          if ! [ -s tasks.txt ]; then
            echo "count=0" >> "$GITHUB_OUTPUT"
            echo "No step-script changes detected; skipping TDP deploy."
            exit 0
          fi

          echo "count=$(wc -l < tasks.txt | tr -d ' ')" >> "$GITHUB_OUTPUT"
          echo "Step-scripts to deploy:" && cat tasks.txt

      - name: Update pipeline JSON & send to TDP
        if: steps.plan.outputs.count != '0'
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${TDP_API_TOKEN:-}" ] || { echo "TDP_API_TOKEN secret is required"; exit 1; }

          while IFS= read -r path; do
            # Example: Implementation_Codes/Test_instrument/src/pipeline_test1-script_step2.py
            inst_root="${path%%/src/*}"        # -> Implementation_Codes/Test_instrument
            task_file="${path##*/}"            # -> pipeline_test1-script_step2.py

            # pipeline_test1-script_step2.py -> pipeline_test1.json
            pipeline_json="$(printf '%s\n' "$task_file" | sed -E 's/^([^ -]+)-.*$/\1.json/')"

            echo "::group::Instrument: $inst_root | Task: $task_file | JSON: $pipeline_json"

            # Sanity checks
            [ -f "$inst_root/config/$pipeline_json" ] || { echo "Missing $inst_root/config/$pipeline_json"; exit 1; }
            [ -f "$inst_root/src/$task_file" ]        || { echo "Missing $inst_root/src/$task_file"; exit 1; }
            [ -f "$inst_root/src/update_pipeline.py" ]|| { echo "Missing $inst_root/src/update_pipeline.py"; exit 1; }

            # Run updater FROM the instrument root so its 'config'/'src' paths resolve
            (
              cd "$inst_root"
              python src/update_pipeline.py "$pipeline_json" "$task_file"
              [ -s config/pipeline_out.json ] || { echo "update_pipeline did not produce config/pipeline_out.json"; exit 1; }
              echo "Updated JSON preview (first 1KB):"
              head -c 1024 config/pipeline_out.json || true
            )

            # Build endpoint URL
            if [ -n "${TDP_INGEST_URL:-}" ]; then
              URL="${TDP_INGEST_URL%/}"
            else
              [ -n "${TDP_PIPELINE_ID:-}" ] || { echo "Provide TDP_INGEST_URL or TDP_PIPELINE_ID secret"; exit 1; }
              URL="https://api.tetrascience.com/v1/pipeline/update/${TDP_PIPELINE_ID}"
            fi

            echo "POST -> $URL"
            http_code=$(curl -sS -o resp.json -w "%{http_code}" -X POST "$URL" \
              -H "Authorization: Bearer $TDP_API_TOKEN" \
              -H "x-org-slug: ${TDP_ORG_SLUG}" \
              -H "Content-Type: application/json" \
              --data-binary @"$inst_root/config/pipeline_out.json")

            echo "TDP response: $http_code"
            head -c 1024 resp.json || true
            if [ "$http_code" -lt 200 ] || [ "$http_code" -ge 300 ]; then
              echo "::error::TDP update failed with HTTP $http_code"
              exit 1
            fi
            echo "::endgroup::"
          done < tasks.txt

      - name: Nothing to deploy
        if: steps.plan.outputs.count == '0'
        run: echo "No applicable step-script changes; TDP deploy skipped." 
